<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.schriftgestaltung.disablesAutomaticAlignment</key>
	<false/>
	<key>com.schriftgestaltung.fontMaster.customParameters</key>
	<array>
		<dict>
			<key>name</key>
			<string>prep Table Assembly</string>
			<key>value</key>
			<string>SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200 
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1 
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1 
PUSHW[ ]	/* 2 values pushed */
2048 2048 
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 5 values pushed */
0 39 24 3 0 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 8 values pushed */
44 4 28 8 18 5 3 10 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 8 values pushed */
48 2 36 6 23 3 3 10 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 10 
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 5 values pushed */
2880 1856 1216 3 11 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 13 
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 5 values pushed */
64 64 64 3 11 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1 
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1 
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048 
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0 
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1 
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088 
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0 
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
46 2 30 6 20 3 3 14 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511 
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4 
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0 
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */</string>
		</dict>
		<dict>
			<key>name</key>
			<string>fpgm Table Assembly</string>
			<key>value</key>
			<string>PUSHB[ ]	/* 1 value pushed */
0 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14 
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6 
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40 
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048 
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32 
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0 
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19 
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20 
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12 
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4 
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33 
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1 
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22 
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192 
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13 
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64 
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13 
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13 
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48 
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192 
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54 
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0 
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12 
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30 
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280 
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22 
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7 
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98 
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13 
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
3 
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5 
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8 
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64 
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64 
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9 
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0 
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64 
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3 
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2 
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100 
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15 
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16 
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0 
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16 
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024 
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18 
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100 
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13 
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19 
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100 
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19 
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18 
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1 
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17 
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1 
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16 
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16 
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16 
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15 
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16 
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0 
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0 
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21 
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2 
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13 
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1 
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0 
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
20 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
20 8 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139 
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16 
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6 
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1 
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16 
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22 
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1 
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16 
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38 
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1 
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32 
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2 
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13 
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1 
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0 
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139 
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24 
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46 
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50 
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2 
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6 
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1 
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51 
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2 
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6 
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1 
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53 
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6 
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1 
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0 
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1 
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55 
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0 
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1 
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11 
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11 
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96 
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64 
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26 
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5 
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0 
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5 
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048 
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32 
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59 
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11 
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11 
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96 
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64 
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26 
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58 
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59 
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1 
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1 
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1 
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60 
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61 
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62 
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63 
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3 
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8 
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3 
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1 
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */</string>
		</dict>
		<dict>
			<key>name</key>
			<string>cvt Table</string>
			<key>value</key>
			<string>(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    706,
    620,
    "-19",
    706,
    620,
    "-19",
    106,
    106,
    45,
    45,
    668,
    "-18",
    636,
    400,
    18,
    "-343",
    703,
    "-18",
    636,
    400,
    11,
    "-343",
    24,
    24,
    24,
    24,
    727,
    371,
    727,
    371
)</string>
		</dict>
	</array>
	<key>com.schriftgestaltung.fontMasterID</key>
	<string>D6A4831D-747C-4592-93C0-305F4CD57904</string>
	<key>com.schriftgestaltung.glyphOrder</key>
	<array>
		<string>.notdef</string>
		<string>.null</string>
		<string>space</string>
		<string>LF</string>
		<string>controlCR</string>
		<string>exclam</string>
		<string>quotedbl</string>
		<string>numbersign</string>
		<string>dollar</string>
		<string>percent</string>
		<string>ampersand</string>
		<string>quotesingle</string>
		<string>parenleft</string>
		<string>parenright</string>
		<string>asterisk</string>
		<string>plus</string>
		<string>comma</string>
		<string>hyphen</string>
		<string>period</string>
		<string>slash</string>
		<string>zero</string>
		<string>one</string>
		<string>two</string>
		<string>three</string>
		<string>four</string>
		<string>five</string>
		<string>six</string>
		<string>seven</string>
		<string>eight</string>
		<string>nine</string>
		<string>colon</string>
		<string>semicolon</string>
		<string>less</string>
		<string>equal</string>
		<string>greater</string>
		<string>question</string>
		<string>at</string>
		<string>A</string>
		<string>B</string>
		<string>C</string>
		<string>D</string>
		<string>E</string>
		<string>F</string>
		<string>G</string>
		<string>H</string>
		<string>I</string>
		<string>J</string>
		<string>K</string>
		<string>L</string>
		<string>M</string>
		<string>N</string>
		<string>O</string>
		<string>P</string>
		<string>Q</string>
		<string>R</string>
		<string>S</string>
		<string>T</string>
		<string>U</string>
		<string>V</string>
		<string>W</string>
		<string>X</string>
		<string>Y</string>
		<string>Z</string>
		<string>bracketleft</string>
		<string>backslash</string>
		<string>bracketright</string>
		<string>underscore</string>
		<string>grave</string>
		<string>a</string>
		<string>b</string>
		<string>c</string>
		<string>d</string>
		<string>e</string>
		<string>f</string>
		<string>g</string>
		<string>h</string>
		<string>i</string>
		<string>j</string>
		<string>k</string>
		<string>l</string>
		<string>m</string>
		<string>n</string>
		<string>o</string>
		<string>p</string>
		<string>q</string>
		<string>r</string>
		<string>s</string>
		<string>t</string>
		<string>u</string>
		<string>v</string>
		<string>w</string>
		<string>x</string>
		<string>y</string>
		<string>z</string>
		<string>braceleft</string>
		<string>verticalbar</string>
		<string>braceright</string>
		<string>asciitilde</string>
		<string>uni00A0</string>
		<string>exclamdown</string>
		<string>cent</string>
		<string>sterling</string>
		<string>currency</string>
		<string>yen</string>
		<string>brokenbar</string>
		<string>section</string>
		<string>dieresis</string>
		<string>copyright</string>
		<string>ordfeminine</string>
		<string>guillemotleft</string>
		<string>logicalnot</string>
		<string>uni00AD</string>
		<string>registered</string>
		<string>overscore</string>
		<string>degree</string>
		<string>plusminus</string>
		<string>uni00B2</string>
		<string>uni00B3</string>
		<string>acute</string>
		<string>uni00B5</string>
		<string>paragraph</string>
		<string>cedilla</string>
		<string>uni00B9</string>
		<string>ordmasculine</string>
		<string>guillemotright</string>
		<string>onequarter</string>
		<string>onehalf</string>
		<string>threequarters</string>
		<string>questiondown</string>
		<string>Agrave</string>
		<string>Aacute</string>
		<string>Acircumflex</string>
		<string>Atilde</string>
		<string>Adieresis</string>
		<string>Aring</string>
		<string>AE</string>
		<string>Ccedilla</string>
		<string>Egrave</string>
		<string>Eacute</string>
		<string>Ecircumflex</string>
		<string>Edieresis</string>
		<string>Igrave</string>
		<string>Iacute</string>
		<string>Icircumflex</string>
		<string>Idieresis</string>
		<string>Eth</string>
		<string>Ntilde</string>
		<string>Ograve</string>
		<string>Oacute</string>
		<string>Ocircumflex</string>
		<string>Otilde</string>
		<string>Odieresis</string>
		<string>multiply</string>
		<string>Oslash</string>
		<string>Ugrave</string>
		<string>Uacute</string>
		<string>Ucircumflex</string>
		<string>Udieresis</string>
		<string>Yacute</string>
		<string>Thorn</string>
		<string>germandbls</string>
		<string>agrave</string>
		<string>aacute</string>
		<string>acircumflex</string>
		<string>atilde</string>
		<string>adieresis</string>
		<string>aring</string>
		<string>ae</string>
		<string>ccedilla</string>
		<string>egrave</string>
		<string>eacute</string>
		<string>ecircumflex</string>
		<string>edieresis</string>
		<string>igrave</string>
		<string>iacute</string>
		<string>icircumflex</string>
		<string>idieresis</string>
		<string>eth</string>
		<string>ntilde</string>
		<string>ograve</string>
		<string>oacute</string>
		<string>ocircumflex</string>
		<string>otilde</string>
		<string>odieresis</string>
		<string>divide</string>
		<string>oslash</string>
		<string>ugrave</string>
		<string>uacute</string>
		<string>ucircumflex</string>
		<string>udieresis</string>
		<string>yacute</string>
		<string>thorn</string>
		<string>ydieresis</string>
		<string>dotlessi</string>
		<string>OE</string>
		<string>oe</string>
		<string>florin</string>
		<string>circumflex</string>
		<string>caron</string>
		<string>breve</string>
		<string>ogonek</string>
		<string>ilde</string>
		<string>hungarumlaut</string>
		<string>uni03A9</string>
		<string>pi</string>
		<string>uni1EBD</string>
		<string>endash</string>
		<string>emdash</string>
		<string>quoteleft</string>
		<string>quoteright</string>
		<string>quotedblleft</string>
		<string>quotedblright</string>
		<string>quotedblbase</string>
		<string>dagger</string>
		<string>daggerdbl</string>
		<string>bullet</string>
		<string>ellipsis</string>
		<string>perthousand</string>
		<string>guilsinglleft</string>
		<string>guilsinglright</string>
		<string>uni2074</string>
		<string>Euro</string>
		<string>trademark</string>
		<string>partialdiff</string>
		<string>uni2206</string>
		<string>product</string>
		<string>summation</string>
		<string>uni2215</string>
		<string>radical</string>
		<string>infinity</string>
		<string>approxequal</string>
		<string>notequal</string>
		<string>lessequal</string>
		<string>greaterequal</string>
		<string>lozenge</string>
		<string>uniE0FF</string>
		<string>uniE977</string>
		<string>uniE9AD</string>
		<string>uniF002</string>
		<string>uniF003</string>
		<string>uniF004</string>
		<string>uniF005</string>
		<string>uniF007</string>
		<string>uniF009</string>
		<string>ntilde.alt1</string>
		<string>uniF00B</string>
		<string>uniF00C</string>
		<string>uniF00D</string>
		<string>uniF00E</string>
		<string>uniF00F</string>
		<string>uniF010</string>
		<string>uniF011</string>
		<string>uniF012</string>
		<string>uniF013</string>
		<string>uniF014</string>
		<string>uniF015</string>
		<string>uniF016</string>
		<string>uniF017</string>
		<string>uniF018</string>
		<string>uniF019</string>
		<string>uniF01A</string>
		<string>uniF01B</string>
		<string>uniF01C</string>
		<string>uniF01D</string>
		<string>uniF01E</string>
		<string>g.alt1</string>
		<string>uniF020</string>
		<string>uniF021</string>
		<string>uniF022</string>
		<string>uniF023</string>
		<string>uniF024</string>
		<string>uniF025</string>
		<string>uniF026</string>
		<string>uniF027</string>
		<string>uniF028</string>
		<string>uniF029</string>
		<string>uniF02A</string>
		<string>uniF02B</string>
		<string>uniF02C</string>
		<string>C.alt2</string>
		<string>uniF02E</string>
		<string>uniF02F</string>
		<string>uniF030</string>
		<string>uniF031</string>
		<string>uniF032</string>
		<string>uniF033</string>
		<string>uniF034</string>
		<string>uniF035</string>
		<string>uniF036</string>
		<string>uniF037</string>
		<string>uniF038</string>
		<string>uniF039</string>
		<string>uniF03A</string>
		<string>uniF03B</string>
		<string>uniF03C</string>
		<string>uniF03D</string>
		<string>uniF03E</string>
		<string>uniF03F</string>
		<string>uniF040</string>
		<string>uniF041</string>
		<string>uniF042</string>
		<string>uniF043</string>
		<string>uniF044</string>
		<string>uniF045</string>
		<string>uniF046</string>
		<string>uniF047</string>
		<string>uniF048</string>
		<string>uniF8FF</string>
		<string>fi.liga</string>
		<string>fl.liga</string>
		<string>asciicircum</string>
		<string>arrowup</string>
		<string>uni2197</string>
		<string>arrowright</string>
		<string>uni2198</string>
		<string>arrowdown</string>
		<string>uni2199</string>
		<string>arrowleft</string>
		<string>uni2196</string>
		<string>arrowboth</string>
		<string>arrowupdn</string>
		<string>newGlyph</string>
		<string>newGlyph.001</string>
		<string>newGlyph.002</string>
		<string>newGlyph.003</string>
	</array>
	<key>com.schriftgestaltung.useNiceNames</key>
	<false/>
	<key>com.schriftgestaltung.weightValue</key>
	<integer>400</integer>
	<key>com.schriftgestaltung.widthValue</key>
	<integer>5</integer>
	<key>public.glyphOrder</key>
	<array>
		<string>.notdef</string>
		<string>.null</string>
		<string>space</string>
		<string>LF</string>
		<string>exclam</string>
		<string>quotedbl</string>
		<string>numbersign</string>
		<string>dollar</string>
		<string>percent</string>
		<string>ampersand</string>
		<string>quotesingle</string>
		<string>parenleft</string>
		<string>parenright</string>
		<string>asterisk</string>
		<string>plus</string>
		<string>comma</string>
		<string>hyphen</string>
		<string>period</string>
		<string>slash</string>
		<string>zero</string>
		<string>one</string>
		<string>two</string>
		<string>three</string>
		<string>four</string>
		<string>five</string>
		<string>six</string>
		<string>seven</string>
		<string>eight</string>
		<string>nine</string>
		<string>colon</string>
		<string>semicolon</string>
		<string>less</string>
		<string>equal</string>
		<string>greater</string>
		<string>question</string>
		<string>at</string>
		<string>A</string>
		<string>B</string>
		<string>C</string>
		<string>D</string>
		<string>E</string>
		<string>F</string>
		<string>G</string>
		<string>H</string>
		<string>I</string>
		<string>J</string>
		<string>K</string>
		<string>L</string>
		<string>M</string>
		<string>N</string>
		<string>O</string>
		<string>P</string>
		<string>Q</string>
		<string>R</string>
		<string>S</string>
		<string>T</string>
		<string>U</string>
		<string>V</string>
		<string>W</string>
		<string>X</string>
		<string>Y</string>
		<string>Z</string>
		<string>bracketleft</string>
		<string>backslash</string>
		<string>bracketright</string>
		<string>underscore</string>
		<string>grave</string>
		<string>a</string>
		<string>b</string>
		<string>c</string>
		<string>d</string>
		<string>e</string>
		<string>f</string>
		<string>g</string>
		<string>h</string>
		<string>i</string>
		<string>j</string>
		<string>k</string>
		<string>l</string>
		<string>m</string>
		<string>n</string>
		<string>o</string>
		<string>p</string>
		<string>q</string>
		<string>r</string>
		<string>s</string>
		<string>t</string>
		<string>u</string>
		<string>v</string>
		<string>w</string>
		<string>x</string>
		<string>y</string>
		<string>z</string>
		<string>braceleft</string>
		<string>braceright</string>
		<string>asciitilde</string>
		<string>exclamdown</string>
		<string>cent</string>
		<string>sterling</string>
		<string>currency</string>
		<string>yen</string>
		<string>brokenbar</string>
		<string>section</string>
		<string>dieresis</string>
		<string>copyright</string>
		<string>ordfeminine</string>
		<string>logicalnot</string>
		<string>uni00AD</string>
		<string>registered</string>
		<string>degree</string>
		<string>plusminus</string>
		<string>uni00B2</string>
		<string>uni00B3</string>
		<string>acute</string>
		<string>uni00B5</string>
		<string>paragraph</string>
		<string>cedilla</string>
		<string>uni00B9</string>
		<string>ordmasculine</string>
		<string>onequarter</string>
		<string>onehalf</string>
		<string>threequarters</string>
		<string>questiondown</string>
		<string>Agrave</string>
		<string>Aacute</string>
		<string>Acircumflex</string>
		<string>Atilde</string>
		<string>Adieresis</string>
		<string>Aring</string>
		<string>AE</string>
		<string>Ccedilla</string>
		<string>Egrave</string>
		<string>Eacute</string>
		<string>Ecircumflex</string>
		<string>Edieresis</string>
		<string>Igrave</string>
		<string>Iacute</string>
		<string>Icircumflex</string>
		<string>Idieresis</string>
		<string>Eth</string>
		<string>Ntilde</string>
		<string>Ograve</string>
		<string>Oacute</string>
		<string>Ocircumflex</string>
		<string>Otilde</string>
		<string>Odieresis</string>
		<string>multiply</string>
		<string>Oslash</string>
		<string>Ugrave</string>
		<string>Uacute</string>
		<string>Ucircumflex</string>
		<string>Udieresis</string>
		<string>Yacute</string>
		<string>Thorn</string>
		<string>germandbls</string>
		<string>agrave</string>
		<string>aacute</string>
		<string>acircumflex</string>
		<string>atilde</string>
		<string>adieresis</string>
		<string>aring</string>
		<string>ae</string>
		<string>ccedilla</string>
		<string>egrave</string>
		<string>eacute</string>
		<string>ecircumflex</string>
		<string>edieresis</string>
		<string>igrave</string>
		<string>iacute</string>
		<string>icircumflex</string>
		<string>idieresis</string>
		<string>eth</string>
		<string>ntilde</string>
		<string>ograve</string>
		<string>oacute</string>
		<string>ocircumflex</string>
		<string>otilde</string>
		<string>odieresis</string>
		<string>divide</string>
		<string>oslash</string>
		<string>ugrave</string>
		<string>uacute</string>
		<string>ucircumflex</string>
		<string>udieresis</string>
		<string>yacute</string>
		<string>thorn</string>
		<string>ydieresis</string>
		<string>OE</string>
		<string>oe</string>
		<string>florin</string>
		<string>circumflex</string>
		<string>caron</string>
		<string>breve</string>
		<string>ogonek</string>
		<string>hungarumlaut</string>
		<string>pi</string>
		<string>endash</string>
		<string>emdash</string>
		<string>quoteleft</string>
		<string>quoteright</string>
		<string>quotedblleft</string>
		<string>quotedblright</string>
		<string>quotedblbase</string>
		<string>dagger</string>
		<string>daggerdbl</string>
		<string>bullet</string>
		<string>ellipsis</string>
		<string>perthousand</string>
		<string>guilsinglleft</string>
		<string>guilsinglright</string>
		<string>uni2074</string>
		<string>trademark</string>
		<string>partialdiff</string>
		<string>uni2206</string>
		<string>product</string>
		<string>summation</string>
		<string>uni2215</string>
		<string>radical</string>
		<string>infinity</string>
		<string>approxequal</string>
		<string>notequal</string>
		<string>lessequal</string>
		<string>greaterequal</string>
		<string>lozenge</string>
		<string>uniE0FF</string>
		<string>uniE977</string>
		<string>uniE9AD</string>
		<string>uniF002</string>
		<string>uniF003</string>
		<string>uniF004</string>
		<string>uniF005</string>
		<string>uniF007</string>
		<string>uniF009</string>
		<string>uniF00B</string>
		<string>uniF00C</string>
		<string>uniF00D</string>
		<string>uniF00E</string>
		<string>uniF00F</string>
		<string>uniF010</string>
		<string>uniF011</string>
		<string>uniF012</string>
		<string>uniF013</string>
		<string>uniF014</string>
		<string>uniF015</string>
		<string>uniF016</string>
		<string>uniF017</string>
		<string>uniF018</string>
		<string>uniF019</string>
		<string>uniF01A</string>
		<string>uniF01B</string>
		<string>uniF01C</string>
		<string>uniF01D</string>
		<string>uniF01E</string>
		<string>g.alt1</string>
		<string>uniF020</string>
		<string>uniF021</string>
		<string>uniF022</string>
		<string>uniF023</string>
		<string>uniF024</string>
		<string>uniF025</string>
		<string>uniF026</string>
		<string>uniF027</string>
		<string>uniF028</string>
		<string>uniF029</string>
		<string>uniF02A</string>
		<string>uniF02B</string>
		<string>uniF02C</string>
		<string>C.alt2</string>
		<string>uniF02E</string>
		<string>uniF02F</string>
		<string>uniF030</string>
		<string>uniF031</string>
		<string>uniF032</string>
		<string>uniF033</string>
		<string>uniF034</string>
		<string>uniF035</string>
		<string>uniF036</string>
		<string>uniF037</string>
		<string>uniF038</string>
		<string>uniF039</string>
		<string>uniF03A</string>
		<string>uniF03B</string>
		<string>uniF03C</string>
		<string>uniF03D</string>
		<string>uniF03E</string>
		<string>uniF03F</string>
		<string>uniF040</string>
		<string>uniF041</string>
		<string>uniF042</string>
		<string>uniF043</string>
		<string>uniF044</string>
		<string>uniF045</string>
		<string>uniF046</string>
		<string>uniF047</string>
		<string>uniF048</string>
		<string>uniF8FF</string>
		<string>fi.liga</string>
		<string>fl.liga</string>
		<string>asciicircum</string>
		<string>Abreve</string>
		<string>uni1EAE</string>
		<string>uni1EB6</string>
		<string>uni1EB0</string>
		<string>uni1EB2</string>
		<string>uni1EB4</string>
		<string>uni01CD</string>
		<string>uni1EA4</string>
		<string>uni1EAC</string>
		<string>uni1EA6</string>
		<string>uni1EA8</string>
		<string>uni1EAA</string>
		<string>uni01DE</string>
		<string>uni1EA0</string>
		<string>uni1EA2</string>
		<string>uni2C6D</string>
		<string>Amacron</string>
		<string>Aogonek</string>
		<string>Aringacute</string>
		<string>AEacute</string>
		<string>uni01E2</string>
		<string>uni1E04</string>
		<string>uni0181</string>
		<string>uni0243</string>
		<string>Cacute</string>
		<string>Ccaron</string>
		<string>Ccircumflex</string>
		<string>Cdotaccent</string>
		<string>uni0187</string>
		<string>Dcaron</string>
		<string>uni1E12</string>
		<string>Dcroat</string>
		<string>uni1E0C</string>
		<string>uni018A</string>
		<string>uni1E0E</string>
		<string>uni0189</string>
		<string>Ebreve</string>
		<string>Ecaron</string>
		<string>uni0228</string>
		<string>uni1EBE</string>
		<string>uni1EC6</string>
		<string>uni1EC0</string>
		<string>uni1EC2</string>
		<string>uni1EC4</string>
		<string>Edotaccent</string>
		<string>uni1EB8</string>
		<string>uni1EBA</string>
		<string>Emacron</string>
		<string>Eogonek</string>
		<string>uni0190</string>
		<string>uni018E</string>
		<string>uni01A9</string>
		<string>uni1EBC</string>
		<string>uni018F</string>
		<string>uni01B7</string>
		<string>uni01EE</string>
		<string>uni0191</string>
		<string>Gbreve</string>
		<string>Gcaron</string>
		<string>Gcircumflex</string>
		<string>uni0122</string>
		<string>Gdotaccent</string>
		<string>uni0193</string>
		<string>uni1E20</string>
		<string>uni01E4</string>
		<string>Hbar</string>
		<string>uni1E2A</string>
		<string>Hcircumflex</string>
		<string>uni1E24</string>
		<string>uniA7AA</string>
		<string>uniA78D</string>
		<string>IJ</string>
		<string>Ibreve</string>
		<string>uni01CF</string>
		<string>uni1E2E</string>
		<string>Idotaccent</string>
		<string>uni1ECA</string>
		<string>uni1EC8</string>
		<string>Imacron</string>
		<string>Iogonek</string>
		<string>uni0196</string>
		<string>uni0197</string>
		<string>Itilde</string>
		<string>uni004A0301</string>
		<string>Jcircumflex</string>
		<string>uni01E8</string>
		<string>uni0136</string>
		<string>uni0198</string>
		<string>uni1E34</string>
		<string>Lacute</string>
		<string>Lcaron</string>
		<string>uni1E3C</string>
		<string>uni013B</string>
		<string>Ldot</string>
		<string>uni1E36</string>
		<string>uni1E38</string>
		<string>uni1E3A</string>
		<string>Lslash</string>
		<string>uni1E3E</string>
		<string>uni1E40</string>
		<string>uni1E42</string>
		<string>Nacute</string>
		<string>Ncaron</string>
		<string>uni1E4A</string>
		<string>uni0145</string>
		<string>uni1E44</string>
		<string>uni1E46</string>
		<string>uni019D</string>
		<string>uni1E48</string>
		<string>Eng</string>
		<string>uni01D1</string>
		<string>uni1ED0</string>
		<string>uni1ED8</string>
		<string>uni1ED2</string>
		<string>uni1ED4</string>
		<string>uni1ED6</string>
		<string>uni022A</string>
		<string>uni1ECC</string>
		<string>uni1ECE</string>
		<string>Ohorn</string>
		<string>uni1EDA</string>
		<string>uni1EE2</string>
		<string>uni1EDC</string>
		<string>uni1EDE</string>
		<string>uni1EE0</string>
		<string>Ohungarumlaut</string>
		<string>Omacron</string>
		<string>uni1E52</string>
		<string>uni1E50</string>
		<string>uni01EA</string>
		<string>uni0186</string>
		<string>Oslashacute</string>
		<string>uni1E4C</string>
		<string>uni01A4</string>
		<string>Racute</string>
		<string>Rcaron</string>
		<string>uni0156</string>
		<string>uni1E5C</string>
		<string>uni1E5E</string>
		<string>uni024C</string>
		<string>uni2C64</string>
		<string>Sacute</string>
		<string>uniA78B</string>
		<string>Scaron</string>
		<string>Scedilla</string>
		<string>Scircumflex</string>
		<string>uni0218</string>
		<string>uni1E62</string>
		<string>uni1E9E</string>
		<string>Tbar</string>
		<string>Tcaron</string>
		<string>uni0162</string>
		<string>uni1E70</string>
		<string>uni021A</string>
		<string>uni1E6C</string>
		<string>uni01AC</string>
		<string>uni1E6E</string>
		<string>uni01AE</string>
		<string>uni0244</string>
		<string>Ubreve</string>
		<string>uni01D3</string>
		<string>uni01D7</string>
		<string>uni01D9</string>
		<string>uni01DB</string>
		<string>uni01D5</string>
		<string>uni1EE4</string>
		<string>uni1EE6</string>
		<string>Uhorn</string>
		<string>uni1EE8</string>
		<string>uni1EF0</string>
		<string>uni1EEA</string>
		<string>uni1EEC</string>
		<string>uni1EEE</string>
		<string>Uhungarumlaut</string>
		<string>Umacron</string>
		<string>Uogonek</string>
		<string>uni01B1</string>
		<string>Uring</string>
		<string>Utilde</string>
		<string>uni0194</string>
		<string>uni01B2</string>
		<string>uni0245</string>
		<string>Wacute</string>
		<string>Wcircumflex</string>
		<string>Wdieresis</string>
		<string>Wgrave</string>
		<string>uni2C72</string>
		<string>Ycircumflex</string>
		<string>Ydieresis</string>
		<string>uni1E8E</string>
		<string>uni1EF4</string>
		<string>Ygrave</string>
		<string>uni01B3</string>
		<string>uni1EF6</string>
		<string>uni0232</string>
		<string>uni1EF8</string>
		<string>Zacute</string>
		<string>Zcaron</string>
		<string>Zdotaccent</string>
		<string>uni1E92</string>
		<string>uni1E94</string>
		<string>B.alt2</string>
		<string>D.alt2</string>
		<string>F.alt2</string>
		<string>G.alt2</string>
		<string>H.alt2</string>
		<string>I.alt2</string>
		<string>J.alt2</string>
		<string>N.alt2</string>
		<string>P.alt2</string>
		<string>Q.alt2</string>
		<string>R.alt2</string>
		<string>T.alt2</string>
		<string>V.alt2</string>
		<string>W.alt2</string>
		<string>Y.alt2</string>
		<string>Z.alt2</string>
		<string>E.alt3</string>
		<string>O.alt3</string>
		<string>U.alt3</string>
		<string>X.alt3</string>
		<string>A.alt4</string>
		<string>S.alt5</string>
		<string>U.alt5</string>
		<string>uni013B.loclMAH</string>
		<string>uni0145.loclMAH</string>
		<string>A_p</string>
		<string>abreve</string>
		<string>uni1EAF</string>
		<string>uni1EB7</string>
		<string>uni1EB1</string>
		<string>uni1EB3</string>
		<string>uni1EB5</string>
		<string>uni01CE</string>
		<string>uni1EA5</string>
		<string>uni1EAD</string>
		<string>uni1EA7</string>
		<string>uni1EA9</string>
		<string>uni1EAB</string>
		<string>uni01DF</string>
		<string>uni1EA1</string>
		<string>uni1EA3</string>
		<string>uni0251</string>
		<string>amacron</string>
		<string>aogonek</string>
		<string>aringacute</string>
		<string>aeacute</string>
		<string>uni01E3</string>
		<string>uni1E05</string>
		<string>uni0253</string>
		<string>cacute</string>
		<string>ccaron</string>
		<string>ccircumflex</string>
		<string>cdotaccent</string>
		<string>uni0188</string>
		<string>dcaron</string>
		<string>uni1E13</string>
		<string>dcroat</string>
		<string>uni1E0D</string>
		<string>uni0257</string>
		<string>uni1E0F</string>
		<string>uni0256</string>
		<string>ebreve</string>
		<string>ecaron</string>
		<string>uni0229</string>
		<string>uni1EBF</string>
		<string>uni1EC7</string>
		<string>uni1EC1</string>
		<string>uni1EC3</string>
		<string>uni1EC5</string>
		<string>edotaccent</string>
		<string>uni1EB9</string>
		<string>uni1EBB</string>
		<string>emacron</string>
		<string>eogonek</string>
		<string>uni025B</string>
		<string>uni0283</string>
		<string>uni1EBD</string>
		<string>uni01DD</string>
		<string>uni0259</string>
		<string>uni0292</string>
		<string>uni01EF</string>
		<string>uni0263</string>
		<string>gbreve</string>
		<string>gcaron</string>
		<string>gcircumflex</string>
		<string>uni0123</string>
		<string>gdotaccent</string>
		<string>uni0260</string>
		<string>uni0294</string>
		<string>uni0295</string>
		<string>uni0242</string>
		<string>uni1E21</string>
		<string>uni01E5</string>
		<string>hbar</string>
		<string>uni1E2B</string>
		<string>hcircumflex</string>
		<string>uni1E25</string>
		<string>uni0266</string>
		<string>uni1E96</string>
		<string>dotlessi</string>
		<string>ibreve</string>
		<string>uni01D0</string>
		<string>uni1E2F</string>
		<string>i.loclTRK</string>
		<string>uni1ECB</string>
		<string>uni1EC9</string>
		<string>ij</string>
		<string>imacron</string>
		<string>iogonek</string>
		<string>uni0269</string>
		<string>uni0268</string>
		<string>itilde</string>
		<string>uni0237</string>
		<string>uni006A0301</string>
		<string>jcircumflex</string>
		<string>uni01E9</string>
		<string>uni0137</string>
		<string>kgreenlandic</string>
		<string>uni0199</string>
		<string>uni1E35</string>
		<string>lacute</string>
		<string>lcaron</string>
		<string>uni1E3D</string>
		<string>uni013C</string>
		<string>ldot</string>
		<string>uni1E37</string>
		<string>uni1E39</string>
		<string>uni1E3B</string>
		<string>lslash</string>
		<string>uni1E3F</string>
		<string>uni1E41</string>
		<string>uni1E43</string>
		<string>nacute</string>
		<string>napostrophe</string>
		<string>ncaron</string>
		<string>uni1E4B</string>
		<string>uni0146</string>
		<string>uni1E45</string>
		<string>uni1E47</string>
		<string>uni0272</string>
		<string>uni1E49</string>
		<string>eng</string>
		<string>uni01D2</string>
		<string>uni1ED1</string>
		<string>uni1ED9</string>
		<string>uni1ED3</string>
		<string>uni1ED5</string>
		<string>uni1ED7</string>
		<string>uni022B</string>
		<string>uni1ECD</string>
		<string>uni1ECF</string>
		<string>ohorn</string>
		<string>uni1EDB</string>
		<string>uni1EE3</string>
		<string>uni1EDD</string>
		<string>uni1EDF</string>
		<string>uni1EE1</string>
		<string>ohungarumlaut</string>
		<string>omacron</string>
		<string>uni1E53</string>
		<string>uni1E51</string>
		<string>uni01EB</string>
		<string>uni0254</string>
		<string>oslashacute</string>
		<string>uni1E4D</string>
		<string>uni01A5</string>
		<string>uni024B</string>
		<string>racute</string>
		<string>rcaron</string>
		<string>uni0157</string>
		<string>uni1E5D</string>
		<string>uni027E</string>
		<string>uni1E5F</string>
		<string>uni027D</string>
		<string>sacute</string>
		<string>uniA78C</string>
		<string>scaron</string>
		<string>scedilla</string>
		<string>scircumflex</string>
		<string>uni0219</string>
		<string>uni1E63</string>
		<string>tbar</string>
		<string>tcaron</string>
		<string>uni0163</string>
		<string>uni1E71</string>
		<string>uni021B</string>
		<string>uni1E97</string>
		<string>uni1E6D</string>
		<string>uni01AD</string>
		<string>uni1E6F</string>
		<string>uni0288</string>
		<string>uni0289</string>
		<string>ubreve</string>
		<string>uni01D4</string>
		<string>uni01D8</string>
		<string>uni01DA</string>
		<string>uni01DC</string>
		<string>uni01D6</string>
		<string>uni1EE5</string>
		<string>uni1EE7</string>
		<string>uhorn</string>
		<string>uni1EE9</string>
		<string>uni1EF1</string>
		<string>uni1EEB</string>
		<string>uni1EED</string>
		<string>uni1EEF</string>
		<string>uhungarumlaut</string>
		<string>umacron</string>
		<string>uogonek</string>
		<string>uni028A</string>
		<string>uring</string>
		<string>utilde</string>
		<string>uni028B</string>
		<string>uni028C</string>
		<string>wacute</string>
		<string>wcircumflex</string>
		<string>wdieresis</string>
		<string>wgrave</string>
		<string>uni2C73</string>
		<string>ycircumflex</string>
		<string>uni1E8F</string>
		<string>uni1EF5</string>
		<string>ygrave</string>
		<string>uni01B4</string>
		<string>uni1EF7</string>
		<string>uni0233</string>
		<string>uni1EF9</string>
		<string>zacute</string>
		<string>zcaron</string>
		<string>zdotaccent</string>
		<string>uni1E93</string>
		<string>uni1E95</string>
		<string>b.alt2</string>
		<string>c.alt2</string>
		<string>d.alt2</string>
		<string>e.alt2</string>
		<string>f.alt2</string>
		<string>g.alt2</string>
		<string>h.alt2</string>
		<string>i.alt2</string>
		<string>j.alt2</string>
		<string>k.alt2</string>
		<string>l.alt2</string>
		<string>m.alt2</string>
		<string>n.alt2</string>
		<string>o.alt2</string>
		<string>p.alt2</string>
		<string>q.alt2</string>
		<string>r.alt2</string>
		<string>t.alt2</string>
		<string>u.alt2</string>
		<string>v.alt2</string>
		<string>w.alt2</string>
		<string>x.alt2</string>
		<string>y.alt2</string>
		<string>z.alt2</string>
		<string>a.alt3</string>
		<string>e.alt3</string>
		<string>g.alt3</string>
		<string>i.alt3</string>
		<string>m.alt3</string>
		<string>n.alt3</string>
		<string>o.alt3</string>
		<string>s.alt3</string>
		<string>u.alt3</string>
		<string>y.alt3</string>
		<string>a.alt4</string>
		<string>e.alt4</string>
		<string>n.alt4</string>
		<string>o.alt4</string>
		<string>s.alt4</string>
		<string>w.alt4</string>
		<string>o.alt5</string>
		<string>uni013C.loclMAH</string>
		<string>uni0146.loclMAH</string>
		<string>oe.001</string>
		<string>j.alt1.001</string>
		<string>b_e</string>
		<string>c_c</string>
		<string>c_h</string>
		<string>c_t</string>
		<string>e_i</string>
		<string>e_x</string>
		<string>f_o</string>
		<string>h_o</string>
		<string>l_i</string>
		<string>o_e</string>
		<string>o_v</string>
		<string>r_o</string>
		<string>s_h</string>
		<string>t_h</string>
		<string>t_i</string>
		<string>t_t</string>
		<string>t_u</string>
		<string>uni01C2</string>
		<string>uni01C0</string>
		<string>uni01C1</string>
		<string>uni01C3</string>
		<string>uni02B0</string>
		<string>uni02B2</string>
		<string>uni02E1</string>
		<string>uni207F</string>
		<string>uniE132</string>
		<string>uniE133</string>
		<string>uni02B7</string>
		<string>Alpha</string>
		<string>Beta</string>
		<string>Gamma</string>
		<string>uni0394</string>
		<string>Epsilon</string>
		<string>Zeta</string>
		<string>Eta</string>
		<string>Theta</string>
		<string>Iota</string>
		<string>Kappa</string>
		<string>Lambda</string>
		<string>Mu</string>
		<string>Nu</string>
		<string>Xi</string>
		<string>Omicron</string>
		<string>Pi</string>
		<string>Rho</string>
		<string>Sigma</string>
		<string>Tau</string>
		<string>Upsilon</string>
		<string>Phi</string>
		<string>Chi</string>
		<string>Psi</string>
		<string>uni03A9</string>
		<string>Alphatonos</string>
		<string>Epsilontonos</string>
		<string>Etatonos</string>
		<string>Iotatonos</string>
		<string>Omicrontonos</string>
		<string>Upsilontonos</string>
		<string>Omegatonos</string>
		<string>Iotadieresis</string>
		<string>Upsilondieresis</string>
		<string>uni03CF</string>
		<string>alpha</string>
		<string>beta</string>
		<string>gamma</string>
		<string>delta</string>
		<string>epsilon</string>
		<string>zeta</string>
		<string>eta</string>
		<string>theta</string>
		<string>iota</string>
		<string>kappa</string>
		<string>lambda</string>
		<string>uni03BC</string>
		<string>nu</string>
		<string>xi</string>
		<string>omicron</string>
		<string>rho</string>
		<string>uni03C2</string>
		<string>sigma</string>
		<string>tau</string>
		<string>upsilon</string>
		<string>phi</string>
		<string>chi</string>
		<string>psi</string>
		<string>omega</string>
		<string>iotatonos</string>
		<string>iotadieresis</string>
		<string>iotadieresistonos</string>
		<string>upsilontonos</string>
		<string>upsilondieresis</string>
		<string>upsilondieresistonos</string>
		<string>omicrontonos</string>
		<string>omegatonos</string>
		<string>alphatonos</string>
		<string>epsilontonos</string>
		<string>etatonos</string>
		<string>uni03D7</string>
		<string>uniA71C</string>
		<string>uniA71B</string>
		<string>zero.alt1</string>
		<string>one.alt1</string>
		<string>two.alt1</string>
		<string>three.alt1</string>
		<string>four.alt1</string>
		<string>five.alt1</string>
		<string>six.alt1</string>
		<string>seven.alt1</string>
		<string>eight.alt1</string>
		<string>nine.alt1</string>
		<string>zero.alt2</string>
		<string>one.alt2</string>
		<string>two.alt2</string>
		<string>three.alt2</string>
		<string>four.alt2</string>
		<string>five.alt2</string>
		<string>six.alt2</string>
		<string>seven.alt2</string>
		<string>eight.alt2</string>
		<string>nine.alt2</string>
		<string>zero.dnom</string>
		<string>one.dnom</string>
		<string>two.dnom</string>
		<string>three.dnom</string>
		<string>four.dnom</string>
		<string>five.dnom</string>
		<string>six.dnom</string>
		<string>seven.dnom</string>
		<string>eight.dnom</string>
		<string>nine.dnom</string>
		<string>zero.numr</string>
		<string>one.numr</string>
		<string>two.numr</string>
		<string>three.numr</string>
		<string>four.numr</string>
		<string>five.numr</string>
		<string>six.numr</string>
		<string>seven.numr</string>
		<string>eight.numr</string>
		<string>nine.numr</string>
		<string>fraction</string>
		<string>oneeighth</string>
		<string>threeeighths</string>
		<string>fiveeighths</string>
		<string>seveneighths</string>
		<string>CR</string>
		<string>uni00A0</string>
		<string>anoteleia</string>
		<string>uni037E</string>
		<string>periodcentered</string>
		<string>uni2016</string>
		<string>uni203F</string>
		<string>asterisk.alt</string>
		<string>uni208D</string>
		<string>uni208E</string>
		<string>quotesinglbase</string>
		<string>guillemotleft</string>
		<string>guillemotright</string>
		<string>quotedblleft.001</string>
		<string>quotedblright.001</string>
		<string>uni0374</string>
		<string>uni0375</string>
		<string>bar</string>
		<string>Euro</string>
		<string>dollar.alt1</string>
		<string>minus</string>
		<string>emptyset</string>
		<string>integral</string>
		<string>arrowup</string>
		<string>uni2197</string>
		<string>arrowright</string>
		<string>uni2198</string>
		<string>arrowdown</string>
		<string>uni2199</string>
		<string>arrowleft</string>
		<string>uni2196</string>
		<string>arrowboth</string>
		<string>arrowupdn</string>
		<string>uni25CC</string>
		<string>uni03060301</string>
		<string>uni03060300</string>
		<string>uni03060309</string>
		<string>uni03060303</string>
		<string>uni03020301</string>
		<string>uni03020300</string>
		<string>uni03020309</string>
		<string>uni03020303</string>
		<string>tonos</string>
		<string>tonos.case</string>
		<string>dieresistonos</string>
		<string>uni0308</string>
		<string>uni0307</string>
		<string>gravecomb</string>
		<string>uni03000304</string>
		<string>acutecomb</string>
		<string>uni03010304</string>
		<string>uni030B</string>
		<string>uni030C.alt</string>
		<string>uni0302</string>
		<string>uni030C</string>
		<string>uni0306</string>
		<string>uni030A</string>
		<string>tildecomb</string>
		<string>uni0304</string>
		<string>uni03040300</string>
		<string>uni03040301</string>
		<string>hookabovecomb</string>
		<string>uni0310</string>
		<string>uni0312</string>
		<string>uni031B</string>
		<string>dotbelowcomb</string>
		<string>uni0324</string>
		<string>uni0325</string>
		<string>uni0326</string>
		<string>uni0327</string>
		<string>uni0328</string>
		<string>uni032E</string>
		<string>uni0331</string>
		<string>uni0335</string>
		<string>uni035F</string>
		<string>dotaccent</string>
		<string>ring</string>
		<string>tilde</string>
		<string>macron</string>
		<string>uni0326.loclMAH</string>
		<string>uni02BC</string>
		<string>uni02BD</string>
		<string>uni02BB</string>
		<string>uni02B9</string>
		<string>uni02BF</string>
		<string>uni02BE</string>
		<string>uni02C8</string>
		<string>uni02BB.001</string>
		<string>guion</string>
		<string>lowquote</string>
		<string>minussign</string>
		<string>strokeshort</string>
	</array>
</dict>
</plist>
